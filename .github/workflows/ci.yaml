name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache: true
      - run: make test
  e2e-tests:
    name: E2E Tests (on development)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache: true
      - name: Install Ngrok Tunnel
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && \
          sudo apt update && \
          sudo apt install ngrok
          touch ~/ngrok.log
          ngrok config add-authtoken ${{ secrets.NGROK_AUTHTOKEN }}
          (timeout 30m ngrok http 80 --log ~/ngrok.log) &
          echo $?
      - name: Install kind
        run: |
          curl -sSLo kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.19.0/kind-linux-amd64"
          chmod +x kind
          sudo mv kind /usr/local/bin/kind
          kind version
      - name:  Install Kubectl
        run: |
          curl -sSLO "https://storage.googleapis.com/kubernetes-release/release/v1.26.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client --output=yaml
      - name: Kubernetes KinD Cluster
        run: |
          make init-kind
      - name: install nginx
        run: |
          sh ./scripts/init-nginx.sh
      - name: install workflows
        run: |
          sh ./scripts/init-argo-workflows.sh
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: localhost:5001/piper:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Check tunnel existence
        run: |
          echo "NGROK_URL=$(cat ~/ngrok.log | grep -o 'url=https://.*' | cut -d '=' -f 2)" >> $GITHUB_ENV
          cat ~/ngrok.log | grep -o 'url=https://.*' | cut -d '=' -f 2
      - name: init piper
        run: |
          helm upgrade --install piper ./helm-chart \
          -f ./examples/template.values.dev.yaml \
          --set rookout.token="${{ secrets.ROOKOUT_DOGFOOD_TOKEN }}" \
          --set piper.gitProvider.token="${{ secrets.GIT_TOKEN }}" \
          --set piper.gitProvider.webhook.url="${{ env.NGROK_URL }}/piper/webhook" \
          --set piper.gitProvider.webhook.repoList=["piper-test"] \
          --set piper.gitProvider.organization.name="gosharo" \
          --set image.repository=localhost:5001 \
          --set env\[0\].name=ROOKOUT_CONTROLLER_HOST,env\[0\].value=wss://dogfood.control.rookout.com \
          --set env\[1\].name=ROOKOUT_LABELS,env\[1\].value=service:piper\,env:github-action
      - name: sleep
        run: |
          docker ps -a
          helm get values piper
          sleep 60
          kubectl describe pods
          kubectl logs deployment/piper
          kubectl get deployments --watch
          sleep 3600

  lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          only-new-issues: true
          skip-pkg-cache: true
  helm:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check Git diff in /helm-chart
        run: |
          if [ "$(git diff --exit-code --name-only --diff-filter=d origin/main -- helm-chart/)" != "" ]; then
            echo "There are Git diffs in the /helm-chart folder."
            echo "CHART_UPDATED=true" >> $GITHUB_ENV
          else
            echo "There are no Git diffs in the /helm-chart folder."
          fi
      - name: Install Helm Docs
        uses: envoy/install-helm-docs@v1.0.0
        with:
          version: 1.11.0
      - name: Helm lint and template
        run: |
          make helm
        if: ${{ env.CHART_UPDATED }}