{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to Piper! Piper is open source project that aimed at providing multibranch pipeline functionality to Argo Workflows, allows users to create distinct Workflows based on Git branches.</p>"},{"location":"#general-explanation","title":"General explanation","text":"<p>Piper configures a webhook in git provider and listens to the webhooks sends. It will create a Workflow CRD out of branches that contains <code>.workflows</code> folder. This folder should contain declarations of the templates and main DAG that will be running. Finally, it will submit the Workflow as a K8s resource in the cluster. To access more detailed explanations, please navigate to the Usage.</p>"},{"location":"CONTRIBUTING/","title":"Developers","text":""},{"location":"CONTRIBUTING/#how-to-contribute","title":"How To Contribute","text":"<p>We appreciate contributions from the community to make Piper even better. To contribute, follow the steps below:</p> <ol> <li>Fork the Piper repository to your GitHub account.</li> <li>Clone the forked repository to your local machine: <pre><code>git clone https://github.com/your-username/Piper.git\n</code></pre></li> <li>Create a new branch to work on your feature or bug fix: <pre><code>git checkout -b my-feature\n</code></pre></li> <li>Make your changes, following the coding guidelines outlined in this document.</li> <li>Commit your changes with clear and descriptive commit messages and sign it: <pre><code>git commit -s -m \"fix: Add new feature\"\n</code></pre></li> <li>please make sure you commit as described in conventional commit</li> <li>Push your changes to your forked repository: <pre><code>git push origin my-feature\n</code></pre></li> <li>Open a pull request against the main branch of the original Piper repository.</li> </ol>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>We welcome and appreciate contributions from the community. If you have developed a new feature, improvement, or bug fix for Piper, follow these steps to submit a pull request:</p> <ol> <li>Make sure you have forked the Piper repository and created a new branch for your changes. Checkout How To Contribute.</li> <li>commit your changes and push them to your forked repository.</li> <li>Go to the Piper repository on GitHub.</li> <li>Click on the \"New Pull Request\" button.</li> <li>Select your branch and provide a descriptive title and detailed description of your changes.</li> <li>If your pull request relates to an open issue, reference the issue in the description using the GitHub issue syntax (e.g., Fixes #123).</li> <li>Submit the pull request, and our team will review your changes. We appreciate your patience during the review process and may provide feedback or request further modifications.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-naming","title":"Pull Request Naming","text":"<p>The name should follow conventional commit naming. </p>"},{"location":"CONTRIBUTING/#coding-guidelines","title":"Coding Guidelines","text":"<p>To maintain a consistent codebase and ensure readability, we follow a set of coding guidelines in Piper. Please adhere to the following guidelines when making changes:</p> <ul> <li>Follow the Effective Go guide for Go code.</li> <li>Follow the Folder convention guide for Go code.</li> <li>Write clear and concise comments to explain the code's functionality.</li> <li>Use meaningful variable and function names.</li> <li>Make sure your code is properly formatted and free of syntax errors.</li> <li>Run tests locally.</li> <li>Check that the feature documented.</li> <li>Add new packages only if necessary and already existing one, can't be used.</li> <li>Add tests for new features or modification.</li> </ul>"},{"location":"CONTRIBUTING/#helm-chart","title":"Helm Chart","text":"<p>To make sure that the documentation is updated use helm-docs comment convention. The pipeline will execute <code>helm-docs</code> command and update the version of the chart.</p> <p>Also, please make sure to run those commands locally to debug the chart before merging:</p> <pre><code>make helm\n</code></pre>"},{"location":"CONTRIBUTING/#local-deployment","title":"Local deployment","text":"<p>To make it easy to develop locally, please run the following</p> <p>Prerequisites : 1. install helm 2. install kubectl 3. isntall docker 4. install ngrok <pre><code>brew install ngrok\n</code></pre> 5. install docker 6. install kind <pre><code>brew install kind\n</code></pre></p> <p>Deployment: 1. make sure docker are running.  2. create tunnel with ngrok using <code>make ngrok</code>, save the <code>Forwarding</code> address. 3. create <code>values.dev.yaml</code> file that contains subset of chart's <code>value.yaml</code> file. check example of values file rename it to <code>values.dev.yaml</code> and put in root directory. 4. use <code>make deploy</code>. it will do the following:      * deploy a local registry as container      * deploy a kind cluster as container with configuration      * deploy nginx reverse proxy in the kind cluster      * deploy Piper with the local helm chart 5. validate using <code>curl localhost/piper/healthz</code>.</p>"},{"location":"CONTRIBUTING/#debugging","title":"Debugging","text":"<p>For debugging the best practice is to use Rookout. To enable this function pass a Rookout token in the chart <code>rookout.token</code> or as existing secret <code>rookout.existingSecret</code></p>"},{"location":"environment_variables/","title":"Environment variables","text":""},{"location":"environment_variables/#environment-variables","title":"Environment Variables","text":"<ul> <li> <p>GIT_PROVIDER   The git provider that Piper will use, possible variables: github (will support bitbucket and gitlab)</p> </li> <li> <p>GIT_ORG_NAME   The organization name.</p> </li> <li> <p>GIT_ORG_LEVEL_WEBHOOK   Boolean variable, whether to config webhook in organization level. default <code>false</code></p> </li> <li> <p>GIT_WEBHOOK_REPO_LIST   Comma separated list of repositories to configure webhooks to.</p> </li> <li> <p>ARGO_WORKFLOWS_TOKEN   The token of Argo Workflows server.</p> </li> <li> <p>ARGO_WORKFLOWS_ADDRESS   The address of Argo Workflows Server.</p> </li> <li> <p>ARGO_WORKFLOWS_CREATE_CRD   Whether to directly send Workflows instruction or create a CRD in the Cluster.</p> </li> <li> <p>ARGO_WORKFLOWS_NAMESPACE   The namespace of Workflows creation for Argo Workflows.</p> </li> <li> <p>KUBE_CONFIG   Path to local kubernetes configuration</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#instalation","title":"Instalation","text":"<p>Piper should be deployed in the cluster with Argo Workflows. Piper will create a CRD that Argo Workflows will pick, so install or configure Piper to create those CRDs in the right namespace. </p> <p>Please check out values.yaml file of the helm chart.</p> <p>To add piper helm repo run: <pre><code>helm repo add piper https://rookout.github.io/piper/\n</code></pre></p> <p>After configuring Piper value.yaml, run the following command for installation: <pre><code>helm install piper piper/piper\n</code></pre></p>"},{"location":"installation/#configuration","title":"Configuration","text":""},{"location":"installation/#ingress","title":"Ingress","text":"<p>Piper should listen to webhooks from your git provider. Checkout value.yaml for <code>ingress</code></p>"},{"location":"installation/#git-token","title":"Git Token","text":"<p>The git token should be passed as secret in the helm chart at <code>gitProvider.github.token</code></p>"},{"location":"installation/#webhook-creation","title":"Webhook creation","text":"<p>Piper will create a webhook configuration for you, for the whole orgnization or for each repo you configure. First configure which git provider you are using <code>gitProvider.name</code> (Now only supports github)</p> <p>For organization level configuration provide the following value <code>gitProvider.organization.name</code> and <code>gitProvider.webhook.orgLevel</code> to <code>true</code>.</p> <p>For granular repo configuration provide <code>gitProvider.organization.name</code> and <code>gitProvider.webhook.repoList</code>. </p> <p>When Piper will be deleted the finalizer should delete the configured webhooks for your git provider. (On development)</p>"},{"location":"installation/#argo-workflow-server","title":"Argo Workflow Server","text":"<p>Piper will use REST API to communicate with Argo Workflows server for linting or for creation of workflows (ARGO_WORKFLOWS_CREATE_CRD). Please follow this configuration.</p> <p>To lint the workflow before submitting it, please configure the internal address of Argo Workflows server (for example, <code>argo-server.workflows.svc.cluster.local</code>) in the field: <code>argoWorkflows.server.address</code>. Argo will need a token to authenticate. please provide the secret in <code>argoWorkflows.server.token</code>, Better to pass as a refrences to a secret in the field <code>argoWorkflows.server.token</code>.</p>"},{"location":"installation/#skip-crd-creation","title":"Skip CRD Creation","text":"<p>Piper can communicate directly to Argo Workflow using ARGO_WORKFLOWS_CREATE_CRD environment variable, if you want to skip the creation of CRD change <code>argoWorkflows.crdCreation</code> to <code>false</code>.</p>"},{"location":"usage/","title":"Use piper","text":""},{"location":"usage/#files-and-directory-convention","title":"Files and Directory Convention","text":"<p>Piper will look in each of the target branches a <code>.workflows</code> folder. This folder should contain the following files to create a Workflow out of branch configuration:</p>"},{"location":"usage/#triggersyaml-convention-name","title":"triggers.yaml (convention name)","text":"<p>This file holds a list of triggers that will be executed <code>onStart</code> by <code>events</code> from specific <code>branch</code>. In this example, <code>main.yaml</code> will be executed as DAG when <code>push</code> or <code>pull_request.synchronize</code> events will be applied in <code>main</code> branch. </p> <p><code>onExit</code> can overwrite the default <code>onExit</code> configuration from <code>piper-workflows-config</code> by reference existing DAG tasks as exit.yaml.</p> <p><code>config</code> field used for workflow configuration selection. the default value is <code>default</code> configuration.</p>"},{"location":"usage/#mainyaml-or-others","title":"main.yaml or others","text":"<p>This file can be named as you wish and will be referenced in <code>triggers.yaml</code> file. It will define an entrypoint DAG that the Workflow will execute.</p> <p>As a best practice, this file should contain the dependencies logic and parametrization of each of referenced templates. It should not implement new templates, for this, use template.yaml file.</p>"},{"location":"usage/#exityaml-or-others","title":"exit.yaml or others","text":"<p>This file describes a DAG that will overwrite the default <code>onExit</code> configuration from <code>piper-workflows-config</code>.</p>"},{"location":"usage/#templatesyaml-or-others","title":"templates.yaml or others","text":"<p>This file will have additional templates that will be injected to the workflows. The purpose of this file is to implemented repository scope templates that can be referenced in the executed file.</p> <p>As a best practice, use this file as implementation of template and reference them from executed file.</p>"},{"location":"usage/#parametersyaml-convention-name","title":"parameters.yaml (convention name)","text":"<p>This file will hold a list of global parameters of the Workflow. can be referenced from any template with `{{ workflow.parameters.___ }} Also piper provided global parameters as followed: 1. {{ workflow.parameters.event }} the event that triggered the workflow. 2. {{ workflow.parameters.action }} }} the action that triggered the workflow. 3. {{ workflow.parameters.dest_branch }} the destination branch for pull request. 4. {{ workflow.parameters.commit }} the commit that triggered the workflow. 5. {{ workflow.parameters.repo }} repository name that triggered the workflow. 6. {{ workflow.parameters.user }} the username that triggered the workflow. 7. {{ workflow.parameters.user_email }} the user's email that triggered the workflow. 8. {{ workflow.parameters.pull_request_url }} the url of the pull request that triggered the workflow. 9. {{workflow.parameters.pull_request_title }} the tile of the pull request that triggered the workflow.</p>"},{"location":"usage/#workflow-configuration-spec","title":"Workflow Configuration (Spec)","text":"<p>Best to configure using helm chart in <code>piper.workflowsConfig</code> parameter. To support Workflow configuration (defining Workflow spec field) as presented in the examples, Piper consumes a configMap named <code>piper-workflows-config</code>. This config map can have <code>default</code> Workflow spec, that will be used for any Workflow created or, create other configuration sets that have to be explicitly called on each of the triggers (<code>config</code> field). Please notice that the fields <code>onStart</code> and <code>onExit</code> should not exist. Instead, <code>onStart</code> is a managed field, and <code>onExit</code> can configure a default DAG to execute when the workflow finishes.  </p>"}]}