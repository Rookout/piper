{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to Piper! </p> <p>Piper is an open source project that aimed at providing multibranch pipeline functionality to Argo Workflows, allows users to create distinct Workflows based on Git branches.</p>"},{"location":"#general-explanation","title":"General explanation","text":"<p>To achieve multibranch pipeline functionality Piper will do the hard works for us. At initialization, it will load all configuration and create a webhook in repository or organization scope. Then each branch that have <code>.workflows</code> folder will create a Workflow CRD out of the files in this folder.</p>"},{"location":"CONTRIBUTING/","title":"Developers","text":""},{"location":"CONTRIBUTING/#how-to-contribute","title":"How To Contribute","text":"<p>We appreciate contributions from the community to make Piper even better. To contribute, follow the steps below:</p> <ol> <li>Fork the Piper repository to your GitHub account.</li> <li>Clone the forked repository to your local machine: <pre><code>git clone https://github.com/your-username/Piper.git\n</code></pre></li> <li>Create a new branch to work on your feature or bug fix: <pre><code>git checkout -b my-feature\n</code></pre></li> <li>Make your changes, following the coding guidelines outlined in this document.</li> <li>Commit your changes with clear and descriptive commit messages and sign it: <pre><code>git commit -s -m \"fix: Add new feature\"\n</code></pre></li> <li>please make sure you commit as described in conventional commit</li> <li>Push your changes to your forked repository: <pre><code>git push origin my-feature\n</code></pre></li> <li>Open a pull request against the main branch of the original Piper repository.</li> </ol>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>We welcome and appreciate contributions from the community. If you have developed a new feature, improvement, or bug fix for Piper, follow these steps to submit a pull request:</p> <ol> <li>Make sure you have forked the Piper repository and created a new branch for your changes. Checkout How To Contribute.</li> <li>commit your changes and push them to your forked repository.</li> <li>Go to the Piper repository on GitHub.</li> <li>Click on the \"New Pull Request\" button.</li> <li>Select your branch and provide a descriptive title and detailed description of your changes.</li> <li>If your pull request relates to an open issue, reference the issue in the description using the GitHub issue syntax (e.g., Fixes #123).</li> <li>Submit the pull request, and our team will review your changes. We appreciate your patience during the review process and may provide feedback or request further modifications.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-naming","title":"Pull Request Naming","text":"<p>The name should follow conventional commit naming. </p>"},{"location":"CONTRIBUTING/#coding-guidelines","title":"Coding Guidelines","text":"<p>To maintain a consistent codebase and ensure readability, we follow a set of coding guidelines in Piper. Please adhere to the following guidelines when making changes:</p> <ul> <li>Follow the Effective Go guide for Go code.</li> <li>Follow the Folder convention guide for Go code.</li> <li>Write clear and concise comments to explain the code's functionality.</li> <li>Use meaningful variable and function names.</li> <li>Make sure your code is properly formatted and free of syntax errors.</li> <li>Run tests locally.</li> <li>Check that the feature documented.</li> <li>Add new packages only if necessary and already existing one, can't be used.</li> <li>Add tests for new features or modification.</li> </ul>"},{"location":"CONTRIBUTING/#helm-chart-development","title":"Helm Chart Development","text":"<p>To make sure that the documentation is updated use helm-docs comment convention. The pipeline will execute <code>helm-docs</code> command and update the version of the chart.</p> <p>Also, please make sure to run those commands locally to debug the chart before merging:</p> <pre><code>make helm\n</code></pre>"},{"location":"CONTRIBUTING/#local-deployment","title":"Local deployment","text":"<p>To make it easy to develop locally, please run the following</p> <p>Prerequisites : 1. install helm <pre><code>brew install helm\n</code></pre> 2. install kubectl <pre><code>brew install kubectl\n</code></pre> 3. isntall docker</p> <ol> <li>install ngrok <pre><code>brew install ngrok\n</code></pre></li> <li>install 5 <pre><code>brew install kind\n</code></pre></li> </ol> <p>Deployment: 1. make sure docker are running.  2. create tunnel with ngrok using <code>make ngrok</code>, save the <code>Forwarding</code> address. 3. create <code>values.dev.yaml</code> file that contains subset of chart's <code>value.yaml</code> file. check example of values file rename it to <code>values.dev.yaml</code> and put in root directory. 4. use <code>make deploy</code>. it will do the following:      * deploy a local registry as container      * deploy a kind cluster as container with configuration      * deploy nginx reverse proxy in the kind cluster      * deploy Piper with the local helm chart 5. validate using <code>curl localhost/piper/healthz</code>.</p>"},{"location":"CONTRIBUTING/#debugging","title":"Debugging","text":"<p>For debugging the best practice is to use Rookout. To enable this function pass a Rookout token in the chart <code>rookout.token</code> or as existing secret <code>rookout.existingSecret</code></p>"},{"location":"getting_started/environment_variables/","title":"Environment variables","text":""},{"location":"getting_started/environment_variables/#environment-variables","title":"Environment Variables","text":"<p>The environment variables used by Piper to configure its functionality. The helm chart populate them using values.yaml file</p>"},{"location":"getting_started/environment_variables/#git","title":"Git","text":"<ul> <li> <p>GIT_PROVIDER   The git provider that Piper will use, possible variables: GitHub (will support bitbucket and gitlab)</p> </li> <li> <p>GIT_TOKEN   The git token that will be used.</p> </li> <li> <p>GIT_ORG_NAME   The organization name.</p> </li> <li> <p>GIT_ORG_LEVEL_WEBHOOK   Boolean variable, whether to config webhook in organization level. default <code>false</code></p> </li> <li> <p>GIT_WEBHOOK_REPO_LIST   List of repositories to configure webhooks to.</p> </li> <li> <p>GIT_WEBHOOK_URL   URL of piper ingress, to configure webhooks.</p> </li> </ul>"},{"location":"getting_started/environment_variables/#argo-workflows-server","title":"Argo Workflows Server","text":"<ul> <li> <p>ARGO_WORKFLOWS_TOKEN   The token of Argo Workflows server.</p> </li> <li> <p>ARGO_WORKFLOWS_ADDRESS   The address of Argo Workflows Server.</p> </li> <li> <p>ARGO_WORKFLOWS_CREATE_CRD   Whether to directly send Workflows instruction or create a CRD in the Cluster.</p> </li> <li> <p>ARGO_WORKFLOWS_NAMESPACE   The namespace of Workflows creation for Argo Workflows.</p> </li> <li> <p>KUBE_CONFIG   Used to configure Argo Workflows client with local kube configurations.</p> </li> </ul>"},{"location":"getting_started/environment_variables/#rookout","title":"Rookout","text":"<ul> <li>ROOKOUT_TOKEN   The token used to configure Rookout agent. If not provided, will not start the agent.</li> <li>ROOKOUT_LABELS    The labels to label instances at Rookout, default to \"service:piper\"</li> <li>ROOKOUT_REMOTE_ORIGIN   The repo URL for source code fetching, default:\"https://github.com/Rookout/piper.git\".</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#instalation","title":"Instalation","text":"<p>Piper should be deployed in the cluster with Argo Workflows.  Piper will create a CRD that Argo Workflows will pick, so install or configure Piper to create those CRDs in the right namespace. </p> <p>Please check out values.yaml file of the helm chart configurations.</p> <p>To add piper helm repo run: <pre><code>helm repo add piper https://piper.rookout.com\n</code></pre></p> <p>After configuring Piper values.yaml, run the following command for installation: <pre><code>helm upgrade --install piper piper/piper \\\n-f YOUR_VALUES_FILE.yaml\n</code></pre></p>"},{"location":"getting_started/installation/#required-configuration","title":"Required Configuration","text":""},{"location":"getting_started/installation/#ingress","title":"Ingress","text":"<p>Piper should listen to webhooks from your git provider. Checkout values.yaml for <code>ingress</code></p>"},{"location":"getting_started/installation/#git","title":"Git","text":"<p>Piper will use git for fetching <code>.workflows</code> folder and receiving events using webhooks.</p> <p>To pick which git provider you are using provide <code>gitProvider.name</code> configuration in helm chart (Now only supports GitHub).</p> <p>Also configure you organization name using <code>gitProvider.organization.name</code> in helm chart.</p>"},{"location":"getting_started/installation/#git-token-permissions","title":"Git Token Permissions","text":"<p>The token should have access for creating webhooks and read repositories content. For GitHub configure <code>admin:org</code> and <code>write:org</code> permissions in Classic Token.</p>"},{"location":"getting_started/installation/#token","title":"Token","text":"<p>The git token should be passed as secret in the helm chart at <code>gitProvider.token</code>.  Can be passed as parameter in helm install command using <code>--set piper.gitProvider.token=YOUR_GIT_TOKEN</code></p> <p>Alternatively, you can consume already existing secret and fill up <code>piper.gipProvider.existingSecret</code>. The key should be name <code>token</code>. Can be created using  <pre><code>kubectl create secret generic piper-git-token --from-literal=token=YOUR_GIT_OKEN\n</code></pre></p>"},{"location":"getting_started/installation/#webhook-creation","title":"Webhook creation","text":"<p>Piper will create a webhook configuration for you, for the whole organization or for each repo you configure.</p> <p>Configure <code>piper.webhook.url</code> the address of piper that exposed with ingress.</p> <p>For organization level configure: <code>gitProvider.webhook.orgLevel</code> to <code>true</code>.</p> <p>For granular repo webhook provide list of repos at: <code>gitProvider.webhook.repoList</code>. </p> <p>Piper implements graceful shutdown, it will delete all the webhooks when terminated. </p>"},{"location":"getting_started/installation/#status-check","title":"Status check","text":"<p>Piper will handle status checks for you.  It will notify the GitProvider for the status of Workflow for specific commit that triggered the Piper. For linking provide valid URL of your Argo Workflows server address at: <code>argoWorkflows.server.address</code></p>"},{"location":"getting_started/installation/#argo-workflow-server-on-development","title":"Argo Workflow Server (On development)","text":"<p>Piper will use REST API to communicate with Argo Workflows server for linting or for creation of workflows (ARGO_WORKFLOWS_CREATE_CRD). Please follow this configuration.</p> <p>To lint the workflow before submitting it, please configure the internal address of Argo Workflows server (for example, <code>argo-server.workflows.svc.cluster.local</code>) in the field: <code>argoWorkflows.server.address</code>. Argo will need a token to authenticate. please provide the secret in <code>argoWorkflows.server.token</code>, Better to pass as a references to a secret in the field <code>argoWorkflows.server.token</code>.</p>"},{"location":"getting_started/installation/#skip-crd-creation-on-development","title":"Skip CRD Creation (On development)","text":"<p>Piper can communicate directly to Argo Workflow using ARGO_WORKFLOWS_CREATE_CRD environment variable, if you want to skip the creation of CRD change <code>argoWorkflows.crdCreation</code> to <code>false</code>.</p>"},{"location":"usage/global_variables/","title":"Global variables","text":""},{"location":"usage/global_variables/#global-variables","title":"Global variables","text":"<p>Piper will automatically add Workflow scope parameters that can be referenced from any template. The parameters taken from webhook metadata, and will be populated respectively to GitProvider and event that triggered the workflow.</p> <ol> <li> <p><code>{{ workflow.parameters.event }}</code> the event that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.action }}</code> the action that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.dest_branch }}</code> the destination branch for pull request.</p> </li> <li> <p><code>{{ workflow.parameters.commit }}</code> the commit that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.repo }}</code> repository name that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.user }}</code> the username that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.user_email }}</code> the user's email that triggered the workflow.</p> </li> <li> <p><code>{{ workflow.parameters.pull_request_url }}</code> the url of the pull request that triggered the workflow.</p> </li> <li> <p><code>{{workflow.parameters.pull_request_title }}</code> the tile of the pull request that triggered the workflow.</p> </li> <li> <p><code>{{workflow.parameters.pull_request_labels }}</code> comma seperated labels of the pull request that triggered the workflow.</p> </li> </ol>"},{"location":"usage/workflows_config/","title":"Workflows config","text":""},{"location":"usage/workflows_config/#workflow-configuration","title":"Workflow Configuration","text":"<p>Piper can inject configuration for Workflows that Piper creates.</p> <p><code>default</code> config used as a convention for all Workflows that piper will create, even if not explicitly mentioned in triggers.yaml file.</p>"},{"location":"usage/workflows_config/#configmap","title":"ConfigMap","text":"<p>Piper will mount a configMap when helm used. <code>piper.workflowsConfig</code> variable in helm chart, will create a configMap that hold set of configuration for Piper. Here is an examples of such configuration.</p>"},{"location":"usage/workflows_config/#spec","title":"Spec","text":"<p>This will be injected to Workflow spec field. can hold all configuration of the Workflow. </p> <p>:warning: Please notice that the fields <code>entrypoint</code> and <code>onExit</code> should not exist in spec. both of them are managed fields.</p>"},{"location":"usage/workflows_config/#onexit","title":"onExit","text":"<p>This is the exit handler for each of the Workflows create by piper.  It configures a DAG that will be executed when the workflow ends.  You can provide the templates to it us in the following Examples.</p>"},{"location":"usage/workflows_folder/","title":"Workflows folder","text":""},{"location":"usage/workflows_folder/#workflows-folder","title":".workflows Folder","text":"<p>Piper will look in each of the target branches for a <code>.workflows</code> folder. example. We will explain each of the files that should be included in the <code>.workflows</code> folder.</p>"},{"location":"usage/workflows_folder/#triggersyaml-convention-name","title":"triggers.yaml (convention name)","text":"<p>This file holds a list of triggers that will be executed <code>onStart</code> by <code>events</code> from specific <code>branches</code>.  Piper will execute each of matching triggers, so configure it wisely. <pre><code>- events:\n- push\n- pull_request.synchronize\nbranches: [\"main\"]\nonStart: [\"main.yaml\"]\nonExit: [\"exit.yaml\"]\ntemplates: [\"templates.yaml\"]\nconfig: \"default\"\n</code></pre> Can be found here.</p> <p>In this example <code>main.yaml</code> will be executed as DAG when <code>push</code> or <code>pull_request.synchronize</code> events will be applied in <code>main</code> branch. <code>onExit</code> will be executed <code>exit.yaml</code> when finished the workflow as exit handler.</p> <p><code>onExit</code> can overwrite the default <code>onExit</code> configuration from by reference existing DAG tasks as in the example.</p> <p><code>config</code> field used for workflow configuration selection. the default value is <code>default</code> configuration.</p>"},{"location":"usage/workflows_folder/#events","title":"events","text":"<p>Events field used to terminate when the trigger will be executed. name of the event depends on the git provider. </p> <p>For instance, GitHub pull_request event have few action, one of them is synchronize.</p>"},{"location":"usage/workflows_folder/#branches","title":"branches","text":"<p>For which branch that trigger will be executed.</p>"},{"location":"usage/workflows_folder/#onstart","title":"onStart","text":"<p>This file can be named as you wish and will be referenced in <code>triggers.yaml</code> file. It will define an entrypoint DAG that the Workflow will execute.</p> <p>As a best practice, this file should contain the dependencies logic and parametrization of each of referenced templates. It should not implement new templates, for this, use template.yaml file.</p>"},{"location":"usage/workflows_folder/#onexit","title":"onExit","text":"<p>This field used to pass verbose exitHandler to the triggered workflow. It will override the default onExit from the provided <code>config</code> or the default <code>config</code>.</p> <p>In the provided <code>exit.yaml</code> describes a DAG that will overwrite the default <code>onExit</code> configuration. Example</p>"},{"location":"usage/workflows_folder/#templates","title":"templates","text":"<p>This field will have additional templates that will be injected to the workflows.  The purpose of this field is to create repository scope templates that can be referenced from the DAGs templates at <code>onStart</code> or <code>onExit</code>. Example</p> <p>As a best practice, use this field for template implementation and reference them from executed. Example.</p>"},{"location":"usage/workflows_folder/#config","title":"config","text":"<p>configured by <code>piper-workflows-config</code> configMap.  Can be passed explicitly, or will use <code>deafault</code> configuration.</p>"},{"location":"usage/workflows_folder/#parametersyaml-convention-name","title":"parameters.yaml (convention name)","text":"<p>Will hold a list of global parameters of the Workflow.  can be referenced from any template with <code>{{ workflow.parameters.___ }}.</code></p> <p>Example</p>"}]}